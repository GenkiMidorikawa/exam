1. プログラム実行方法
2. プログラムの動作の概要
3. 使用した変数と関数について
4. テストデータと実行結果



1. プログラム実行方法
以下の通りにGNU Compiler Collection(gcc)を用いてコンパイルを行う。
    g++ main1.cxx
その後、ログファイルlog1.txtが同じディレクトリにある事を確認し、生成された実行ファイルを実行する。




2. プログラムの動作の概要
まずはログファイルを読み込み、登場したIPアドレスのリストを作成する。
次にログファイルの先頭に戻って1行ずつ読み込んでいき、読み込んだIPアドレスがIPアドレスリストの一番上のものと一致するかを判断する。一致した場合は故障が始まったか、または終わったかを判定し、日付時刻やIPアドレスを出力する。
ログファイルを全て読み込み終えたら再び先頭に戻り、IPアドレスリストの2番目のアドレスについて同様の処理を行う。
これを全てのIPアドレスリストのアドレスに対して繰り返し行った後、プログラムは終了する。



3. 使用した関数と変数について
・関数 printDate
ログファイルから読み込んだ日付と時刻を標準出力する。
入力形式はYYYYMMDDhhmmss（年をYYYY、月をMM、日をDD、時をhh、分をmm、秒をssと表記）。
出力形式はYYYY/MM/DD hh:mm:ss。
    ・変数
    std::string unit
        出力に用いる文字列"/"、":"、" "（半角スペース）を使用順に格納している。
    int i, j, k
        ループ数の管理や、配列のインデックスに用いる。

・main関数
    ・変数
    std::string LogFileName
        読み込むログファイルの名前を格納する。
    std::string str
        ログファイルから1行ずつ読み取ったデータを一時的に格納する。
    std::string logdata[3]
        変数strの文字列を","で区切って格納するための変数。logdata[0]には日付時刻、logdata[1]にはIPアドレス、logdata[2]には応答時間が文字列として格納される。
    std::vector<std::string> IPs
        ログファイル内に記述されたIPアドレスを格納する。IPアドレスはログファイルに表れた順番に格納される。
    std::ifstream ifs
        ログファイルを読み込むための変数。
    std::istringstream stream
        変数strを文字列ストリームに変換して格納する。
    bool newFlag
        IPアドレスリストの作成時に、読み取ったIPがリストに存在するかどうかを表す。存在しない場合はtrueである。
    bool timeoutFlag
        ログファイルを読み進める中で、現在タイムアウトにより故障と判定されている最中であるかを表す。故障中ならtrueとなる。
    bool noTimeout
        読み取ったIPアドレスがまだ一度も故障と判定されていないかどうかを表す。一度も故障していなければtrueである。
    int i, j
        ループ数の管理や、配列のインデックスに用いる。



4. テストデータと実行結果
テストデータにはlog1.txtを用いた。
実行結果は次の通りである。
-----
故障期間:
2020/10/19 13:33:24 ～ 2020/10/19 13:33:25 
2020/10/19 13:32:24 ～ 2020/10/19 13:32:26 

IP: 192.168.1.1/24
故障期間:
2020/10/19 13:31:34 ～ 2020/10/19 13:31:36 

IP: 192.168.1.5/24
故障期間:
2020/10/19 13:35:04 ～
-----
