1. プログラム実行方法
2. プログラムの動作の概要
3. 使用した変数と関数について
4. テストデータと実行結果



1. プログラム実行方法
以下の通りにGNU Compiler Collection(gcc)を用いてコンパイルを行う。
    g++ main4.cxx
その後、ログファイルlog4.txtが同じディレクトリにある事を確認し、生成された実行ファイルを実行する。



2. プログラムの動作の概要
まずは故障と判断するタイムアウト数N、過負荷と見なさない平均応答時間の上限t、過負荷かどうかの判定に用いる直近の応答回数mをユーザーに入力させる。
次にログファイルを読み込み、登場したサブネットの開始IPのリストとIPアドレスのリストを作成する。
次に、ログファイルの先頭に戻って1行ずつ読み込んでいき、読み込んだIPアドレスがIPアドレスリストの一番上のものと一致するかを判断する。一致した場合は過負荷状態が始まったか、または終わったかを判定し、tとmの条件に合致する場合は日付時刻やIPアドレスを出力する。
次に、ログファイルの先頭に戻って1行ずつ読み込んでいき、読み込んだIPアドレスのサブネットの開始IPが開始IPのリストの一番上のものと一致するかを判断する。一致した場合は故障が始まったか、または終わったかを判定し、Nの条件に合致する場合は日付時刻やIPアドレスを出力する。
ログファイルを全て読み込み終えたら再び先頭に戻り、IPアドレスリスト及びサブネットリストの2番目のものについて同様の処理を行う。
これを全てのIPアドレスリストのアドレスに対して繰り返し行った後、プログラムは終了する。



3. 使用した関数と変数について
・関数 printDate
ログファイルから読み込んだ日付と時刻を標準出力する。
入力形式はYYYYMMDDhhmmss（年をYYYY、月をMM、日をDD、時をhh、分をmm、秒をssと表記）。
出力形式はYYYY/MM/DD hh:mm:ss。
    ・変数
    std::string unit
        出力に用いる文字列"/"、":"、" "（半角スペース）を使用順に格納している。
    int i, j, k
        ループ数の管理や、配列のインデックスに用いる。

・関数 getHeadIP
渡されたIPアドレスの属するサブネットの開始IPを返す。
    ・変数
    int IPCursor
        IPアドレスの文字列のインデックスの位置を格納する。
    int IPPrefixLength
        IPアドレスのプレフィックス長を格納する。
    int IPRange
        サブネットのIPアドレスの数を格納する。
    std::string headIP
        サブネットの開始IPを格納する。
    int tmp_int, std::string tmp_str
        データを仮に置いておくための変数である。
    int i
        ループ数の管理や、配列のインデックスに用いる。

・main関数
    ・変数
    std::string LogFileName
        読み込むログファイルの名前を格納する。
    std::string str
        ログファイルから1行ずつ読み取ったデータを一時的に格納する。
    std::string logdata[3]
        変数strの文字列を","で区切って格納するための変数。logdata[0]には日付時刻、logdata[1]にはIPアドレス、logdata[2]には応答時間が文字列として格納される。
    std::vector<std::string> IPs
        ログファイル内に記述されたIPアドレスを格納する。IPアドレスはログファイルに表れた順番に格納される。
    std::vector<std::string> Subnets
        ログファイル内に記述されたIPアドレスのサブネットを格納する。
    std::string IPtmp
        IPアドレスの文字列を仮に置いておく変数である。
    int timeoutLimit
        故障と判断するタイムアウト数Nを格納する。
    int pingLimit
        過負荷と見なさない平均応答時間の上限tを格納する。
    int slowNum
        過負荷かどうかの判定に用いる直近の応答回数mを格納する。
    std::ifstream ifs
        ログファイルを読み込むための変数。
    std::istringstream stream
        変数strを文字列ストリームに変換して格納する。
    bool newFlag
        IPアドレスリストの作成時に、読み取ったIPがリストに存在するかどうかを表す。存在しない場合はtrueである。
    int timeoutNum
        ログファイルを読み進める中で、同一のIPアドレスが連続でタイムアウトした回数を格納する。
    std::string tmp_date_timeout
        タイムアウトが初めて起きた時の日付時刻を格納する。
    std::string tmp_date_slow
        初めて過負荷状態となった時の日付時刻を格納する。
    bool timeoutFlag
        ログファイルを読み進める中で、現在タイムアウトにより故障と判定されている最中であるかを表す。故障中ならtrueとなる。
    bool noTimeout
        読み取ったIPアドレスがまだ一度も故障と判定されていないかどうかを表す。一度も故障していなければtrueである。
    bool overloadFlag
        ログファイルを読み進める中で、現在過負荷状態と判定されている最中であるかを表す。過負荷状態ならtrueとなる。
    bool noOverload
        読み取ったIPアドレスがまだ一度も過負荷状態と判定されていないかどうかを表す。一度も過負荷状態になっていなければtrueである。
    bool IPprinted
        読み取ったIPアドレスが既に標準出力に出力されたかどうかを表す。出力された場合はtrueとなる。
    std::vector<int> ping
        直近m回のpingを格納する。
    int i, j, k
        ループ数の管理や、配列のインデックスに用いる。



4. テストデータと実行結果
テストデータにはlog4.txtを用いた。
実行結果は次の通りである。
-----
故障と判断するタイムアウト数N: 3
過負荷と見なさない平均応答時間の上限t: 500
過負荷かどうかの判定に用いる直近の応答回数m: 3


IP: 10.20.30.40/16
過負荷状態期間:
2020/10/19 13:33:27 ～ 2020/10/19 13:33:28

IP: 192.168.1.1/26
過負荷状態期間:
2020/10/19 14:01:23 ～ 2020/10/19 14:01:25

IP: 10.20.100.40/16
故障期間(サブネット毎):
2020/10/19 13:33:22 ～ 2020/10/19 13:33:25 

IP: 192.168.1.3/26
故障期間(サブネット毎):
2020/10/19 14:01:25 ～ 2020/10/19 14:01:28
-----
